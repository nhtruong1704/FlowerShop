package com.example.flower;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.example.flower.adapter.FoodProfileAdapter;import com.example.flower.interfaceI.Foodcallback;import com.example.flower.interfaceI.Storecallback;import com.example.flower.interfaceI.Usercallback;import com.example.flower.firebase.DaoFood;import com.example.flower.firebase.DaoStore;import com.example.flower.firebase.DaoUser;import com.example.flower.local.Localstorage;import com.example.flower.model.Food;import com.example.flower.model.Order;import com.example.flower.model.Store;import com.example.flower.model.User;import com.google.android.material.appbar.CollapsingToolbarLayout;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.squareup.picasso.Picasso;import java.lang.reflect.Type;import java.text.DecimalFormat;import java.text.NumberFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import static com.example.flower.MainActivity.emailuser;public class FoodProfileActivity extends AppCompatActivity {    TextView tv_detail_rating, tv_detail_release_date, tvsl, tv_detail_vote_count, txtsoluong, txtdiachi, txtmota, txtstatus, txtmatl;    Toolbar toolbar;    ImageView iv_backdrop, iv_detail_poster;    int vohan = 0;    int sluongmua = 0;    String idfood = "";    DaoFood daoFood;    ArrayList<Food> foodArrayList;    ArrayList<Food> dsfoodall = new ArrayList<>();    ArrayList<Order> orderArrayList = new ArrayList<>();    ArrayList<Store> storeArrayList = new ArrayList<>();    RecyclerView rv_reviews;    FoodProfileAdapter foodAdapter;    CollapsingToolbarLayout collapsingToolbarLayout;    LinearLayout plush, minus;    DatabaseReference databaseReference;    DaoStore daoStore;    ArrayList<User> dsUser = new ArrayList<>();    DaoUser daoUser;    Button btn_insertcart;    String idstore ="";    String tokenstore="";    Gson gson;    Localstorage localstorage;    double showtien = 0;    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_chitietfood);        iv_backdrop = findViewById(R.id.iv_backdrop);        iv_detail_poster = findViewById(R.id.iv_detail_poster);        tv_detail_rating = findViewById(R.id.tv_detail_rating);        tv_detail_vote_count = findViewById(R.id.tv_detail_vote_count);        tv_detail_release_date = findViewById(R.id.tv_detail_release_date);        rv_reviews = findViewById(R.id.rv_reviews);        btn_insertcart = findViewById(R.id.btn_insertcart);        plush = findViewById(R.id.plush);        minus = findViewById(R.id.minus);        tvsl = findViewById(R.id.tvsl);        txtsoluong = findViewById(R.id.txtsoluong);        txtdiachi = findViewById(R.id.txtdiachi);        txtmota = findViewById(R.id.txtmota);        txtstatus = findViewById(R.id.txtstatus);        txtmatl = findViewById(R.id.txtmatl);        toolbar = findViewById(R.id.toolbar);        final DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getInstance(Locale.US);        decimalFormat.applyPattern("#,###,###,###");        collapsingToolbarLayout = findViewById(R.id.collapsing);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setDisplayShowTitleEnabled(false);        getWindow().setStatusBarColor(ContextCompat.getColor(FoodProfileActivity.this, R.color.colorPrimaryTransparent));        Intent intent = getIntent();        Picasso.get().load(intent.getStringExtra("img")).into(iv_backdrop);        Picasso.get().load(intent.getStringExtra("img")).into(iv_detail_poster);        collapsingToolbarLayout.setTitle(intent.getStringExtra("namefood"));        tv_detail_rating.setText(intent.getStringExtra("gia"));        idfood = intent.getStringExtra("idfood");        tokenstore = intent.getStringExtra("tokenstore");        txtdiachi.setText("Address:\t" + intent.getStringExtra("diachi"));        txtsoluong.setText("Quantity:\t" + intent.getStringExtra("sl"));        txtmota.setText("Description:\t" + intent.getStringExtra("mota"));        daoFood = new DaoFood(FoodProfileActivity.this);        foodArrayList = new ArrayList<>();        foodAdapter = new FoodProfileAdapter(foodArrayList, FoodProfileActivity.this);        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(FoodProfileActivity.this, LinearLayoutManager.HORIZONTAL, false);        rv_reviews.setLayoutManager(linearLayoutManager);        rv_reviews.setHasFixedSize(true);        rv_reviews.setAdapter(foodAdapter);        databaseReference = FirebaseDatabase.getInstance().getReference("Order");        idstore = intent.getStringExtra("idstore");        String keyhdct = databaseReference.push().getKey();        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy", Locale.getDefault());        String currentDateandTime = sdf.format(new Date());        SimpleDateFormat tg = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());        String thoigian = tg.format(new Date());        localstorage = new Localstorage(this);        gson = new Gson();        orderArrayList.clear();        plush.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                int sluongnhap = Integer.parseInt(tvsl.getText().toString());                if (sluongnhap >= 0) {                    int sluongmua_item = Integer.parseInt(tvsl.getText().toString());                    sluongmua_item++;                    tvsl.setText(sluongmua_item + "");                    try {                        Food food = null;                        Store store = null;                        User user = null;                        sluongmua = Integer.parseInt(tvsl.getText().toString());                        for (int i = 0; i < dsfoodall.size(); i++) {                            if (dsfoodall.get(i).getIdfood().matches(idfood.substring(4))) {                                food = dsfoodall.get(i);                                break;                            }                        }                        daoFood = new DaoFood(FoodProfileActivity.this);                        daoStore = new DaoStore(FoodProfileActivity.this);                        daoUser = new DaoUser(FoodProfileActivity.this);                        for (int i = 0; i < storeArrayList.size(); i++) {                            if (storeArrayList.get(i).getEmail().matches(idstore)) {                                store = storeArrayList.get(i);                                break;                            }                        }                        FirebaseUser userbase = FirebaseAuth.getInstance().getCurrentUser();                        for (int i = 0; i < dsUser.size(); i++) {                            if (dsUser.get(i).getToken().matches(userbase.getUid())) {                                user = dsUser.get(i);                                break;                            }                        }                        String idfoodcheck = idfood.substring(4);                        int check = checkmahdct(orderArrayList, idfoodcheck);                        Order order = new Order(keyhdct, food, sluongmua_item, store, user);                        Log.i("Check", String.valueOf(check));                        if (check >= 0) {                            int sluongmua = orderArrayList.get(check).getSoluongmua();                            order.setSoluongmua(sluongmua+1);                            orderArrayList.set(check, order);                            String cartStr = gson.toJson(orderArrayList);                            localstorage.setCart(cartStr);                        } else {//                            int checkcart = checkmahdctshow( getCartList(),idfoodcheck);                            int postion = -1;                            for (int i = 0; i < getCartList().size(); i++) {                                if (getCartList().get(i).getFood().getIdfood().matches(idfoodcheck)) {                                    postion = i;                                    break;                                }                            }                            if (postion < 0) {                                orderArrayList.add(order);                                String cartStr = gson.toJson(orderArrayList);                                localstorage.setCart(cartStr);                            }                        }                    } catch (Exception e) {                        Log.i("fiX",e.getMessage());                    }                    try {                        for (Order hdct : orderArrayList) {                            showtien =  hdct.getSoluongmua() * hdct.getFood().getGia();                        }                        btn_insertcart.setText("Added to cart -\t" + decimalFormat.format(showtien) + "\tUSD");                    } catch (Exception e) {                        Log.i("Error",e.toString());                    }                }            }        });        minus.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                int sluongnhap = Integer.parseInt(tvsl.getText().toString());                if (sluongnhap != 0) {                    int sluongmua_item = Integer.parseInt(tvsl.getText().toString());                    sluongmua_item--;                    tvsl.setText(sluongmua_item + "");                    String idfoodcheck = idfood.substring(4);                    int check1 = checkmahdct(orderArrayList, idfoodcheck);                    Food food = null;                    Store store = null;                    User user = null;                    for (int i = 0; i < dsfoodall.size(); i++) {                        if (dsfoodall.get(i).getIdfood().matches(idfood.substring(4))) {                            food = dsfoodall.get(i);                            break;                        }                    }                    for (int i = 0; i < storeArrayList.size(); i++) {                        if (storeArrayList.get(i).getEmail().matches(idstore)) {                            store = storeArrayList.get(i);                            break;                        }                    }                    for (int i = 0; i < dsUser.size(); i++) {                        if (dsUser.get(i).getEmail().matches(emailuser)) {                            user = dsUser.get(i);                            break;                        }                    }                    Order orderminus = new Order(keyhdct, food, sluongmua_item, store, user);                    if (check1 >= 0) {                        int sluongmua = orderArrayList.get(check1).getSoluongmua();                        orderminus.setSoluongmua(sluongmua-1);                        orderArrayList.set(check1, orderminus);                        String cartStr = gson.toJson(orderArrayList);                        localstorage.setCart(cartStr);                        Log.i("TAG", String.valueOf(orderminus.getSoluongmua()));                    } else {                    }                    try {                        for (Order hdct1 : orderArrayList) {                            showtien = hdct1.getSoluongmua() * hdct1.getFood().getGia();                        }                        btn_insertcart.setText("Added to cart -\t" + decimalFormat.format(showtien) + "\tUSD");                    } catch (Exception e) {                    }                }            }        });        btn_insertcart.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(FoodProfileActivity.this, ThanhToanActivity.class));            }        });        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(FoodProfileActivity.this, MainActivity.class));                overridePendingTransition(R.anim.from_right_in, R.anim.from_left_out);                finish();            }        });        daoFood.getAll(new Foodcallback() {            @Override            public void onSuccess(ArrayList<Food> lists) {                dsfoodall.clear();                dsfoodall.addAll(lists);            }            @Override            public void onError(String message) {            }        });        daoStore = new DaoStore(FoodProfileActivity.this);        daoUser = new DaoUser(FoodProfileActivity.this);        daoStore.getAll(new Storecallback() {            @Override            public void onSuccess(ArrayList<Store> lists) {                storeArrayList.clear();                storeArrayList.addAll(lists);            }            @Override            public void onError(String message) {            }        });        daoUser.getAll(new Usercallback() {            @Override            public void onSuccess(ArrayList<User> lists) {                dsUser.clear();                dsUser.addAll(lists);            }            @Override            public void onError(String message) {            }        });        daoFood.getAll(new Foodcallback() {            @Override            public void onSuccess(ArrayList<Food> lists) {                foodArrayList.clear();                for (int i = 0; i < lists.size(); i++) {                    if (lists.get(i).getIdstore().equalsIgnoreCase(idstore)) {                        foodArrayList.add(lists.get(i));                        foodAdapter.notifyDataSetChanged();                    }                }            }            @Override            public void onError(String message) {            }        });    }    public ArrayList<Order> getCartList() {        if (localstorage.getCart() != null) {            String jsonCart = localstorage.getCart();            Log.d("CART : ", jsonCart);            Type type = new TypeToken<List<Order>>() {            }.getType();            orderArrayList = gson.fromJson(jsonCart, type);            return orderArrayList;        } else {        }        return orderArrayList;    }    public int checkmahdct(ArrayList<Order> dsOrder, String mafood) {        int poss = -1;        Log.i("Size", String.valueOf(dsOrder.size()));        for (int i = 0; i < dsOrder.size(); i++) {            Log.i("dshct", String.valueOf(dsOrder.get(i).getFood()));            if (dsOrder.get(i).getFood().getIdfood().matches(mafood)) {                poss = i;                break;            }        }        return poss;    }    @Override    public void onBackPressed() {        super.onBackPressed();        overridePendingTransition(R.anim.from_right_in, R.anim.from_left_out);    }    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.menu_detail, menu);//        if(menu instanceof MenuBuilder){//            MenuBuilder m = (MenuBuilder) menu;//            //noinspection RestrictedApi//            m.setOptionalIconsVisible(true);//        }        return true;    }    }